ðŸ’¥ Whatâ€™s actually happening
You have:

server.ts

Defines startServer() and returnSocketIo()

Calls startServer() at the bottom

Exports returnSocketIo()

todoController.ts

Imports returnSocketIo() from server.ts

Calls it immediately in the class constructor

Constructor is called immediately via export default new Todo()

app.ts

Imports todoController.ts, which triggers everything in it

So when app.ts is imported in server.ts...

ðŸ“¦ Step-by-step execution
server.ts is loaded

It imports app.ts

app.ts imports todoController.ts

todoController.ts imports returnSocketIo() from server.ts

Now server.ts is not fully done loading yet â€” io is still undefined because startServer() hasn't executed

But returnSocketIo() is called anyway from todoController.ts

ðŸ’¥ Boom! io is undefined â†’ error

This is a circular dependency problem:
server.ts â†’ app.ts â†’ todoController.ts â†’ server.ts
...before startServer() runs.

